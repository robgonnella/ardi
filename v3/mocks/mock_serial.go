// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/robgonnella/ardi/v3/core (interfaces: SerialPort)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSerialPort is a mock of SerialPort interface.
type MockSerialPort struct {
	ctrl     *gomock.Controller
	recorder *MockSerialPortMockRecorder
}

// MockSerialPortMockRecorder is the mock recorder for MockSerialPort.
type MockSerialPortMockRecorder struct {
	mock *MockSerialPort
}

// NewMockSerialPort creates a new mock instance.
func NewMockSerialPort(ctrl *gomock.Controller) *MockSerialPort {
	mock := &MockSerialPort{ctrl: ctrl}
	mock.recorder = &MockSerialPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerialPort) EXPECT() *MockSerialPortMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSerialPort) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSerialPortMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSerialPort)(nil).Close))
}

// SetTargets mocks base method.
func (m *MockSerialPort) SetTargets(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTargets", arg0, arg1)
}

// SetTargets indicates an expected call of SetTargets.
func (mr *MockSerialPortMockRecorder) SetTargets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTargets", reflect.TypeOf((*MockSerialPort)(nil).SetTargets), arg0, arg1)
}

// Streaming mocks base method.
func (m *MockSerialPort) Streaming() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Streaming")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Streaming indicates an expected call of Streaming.
func (mr *MockSerialPortMockRecorder) Streaming() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Streaming", reflect.TypeOf((*MockSerialPort)(nil).Streaming))
}

// Watch mocks base method.
func (m *MockSerialPort) Watch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch")
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockSerialPortMockRecorder) Watch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockSerialPort)(nil).Watch))
}
