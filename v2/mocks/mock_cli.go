// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/robgonnella/ardi/v2/cli-wrapper (interfaces: Cli)

// Package mocks is a generated GoMock package.
package mocks

import (
	commands "github.com/arduino/arduino-cli/rpc/commands"
	gomock "github.com/golang/mock/gomock"
	cli "github.com/robgonnella/ardi/v2/cli-wrapper"
	reflect "reflect"
)

// MockCli is a mock of Cli interface
type MockCli struct {
	ctrl     *gomock.Controller
	recorder *MockCliMockRecorder
}

// MockCliMockRecorder is the mock recorder for MockCli
type MockCliMockRecorder struct {
	mock *MockCli
}

// NewMockCli creates a new mock instance
func NewMockCli(ctrl *gomock.Controller) *MockCli {
	mock := &MockCli{ctrl: ctrl}
	mock.recorder = &MockCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCli) EXPECT() *MockCliMockRecorder {
	return m.recorder
}

// AllBoards mocks base method
func (m *MockCli) AllBoards() []*cli.Board {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBoards")
	ret0, _ := ret[0].([]*cli.Board)
	return ret0
}

// AllBoards indicates an expected call of AllBoards
func (mr *MockCliMockRecorder) AllBoards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBoards", reflect.TypeOf((*MockCli)(nil).AllBoards))
}

// ClientVersion mocks base method
func (m *MockCli) ClientVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientVersion indicates an expected call of ClientVersion
func (mr *MockCliMockRecorder) ClientVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientVersion", reflect.TypeOf((*MockCli)(nil).ClientVersion))
}

// Compile mocks base method
func (m *MockCli) Compile(arg0 cli.CompileOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compile indicates an expected call of Compile
func (mr *MockCliMockRecorder) Compile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockCli)(nil).Compile), arg0)
}

// ConnectedBoards mocks base method
func (m *MockCli) ConnectedBoards() []*cli.Board {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedBoards")
	ret0, _ := ret[0].([]*cli.Board)
	return ret0
}

// ConnectedBoards indicates an expected call of ConnectedBoards
func (mr *MockCliMockRecorder) ConnectedBoards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedBoards", reflect.TypeOf((*MockCli)(nil).ConnectedBoards))
}

// GetInstalledLibs mocks base method
func (m *MockCli) GetInstalledLibs() ([]*commands.InstalledLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledLibs")
	ret0, _ := ret[0].([]*commands.InstalledLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledLibs indicates an expected call of GetInstalledLibs
func (mr *MockCliMockRecorder) GetInstalledLibs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledLibs", reflect.TypeOf((*MockCli)(nil).GetInstalledLibs))
}

// GetInstalledPlatforms mocks base method
func (m *MockCli) GetInstalledPlatforms() ([]*commands.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledPlatforms")
	ret0, _ := ret[0].([]*commands.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledPlatforms indicates an expected call of GetInstalledPlatforms
func (mr *MockCliMockRecorder) GetInstalledPlatforms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledPlatforms", reflect.TypeOf((*MockCli)(nil).GetInstalledPlatforms))
}

// GetPlatforms mocks base method
func (m *MockCli) GetPlatforms() ([]*commands.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms")
	ret0, _ := ret[0].([]*commands.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatforms indicates an expected call of GetPlatforms
func (mr *MockCliMockRecorder) GetPlatforms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockCli)(nil).GetPlatforms))
}

// InstallLibrary mocks base method
func (m *MockCli) InstallLibrary(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallLibrary", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallLibrary indicates an expected call of InstallLibrary
func (mr *MockCliMockRecorder) InstallLibrary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallLibrary", reflect.TypeOf((*MockCli)(nil).InstallLibrary), arg0, arg1)
}

// InstallPlatform mocks base method
func (m *MockCli) InstallPlatform(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallPlatform", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InstallPlatform indicates an expected call of InstallPlatform
func (mr *MockCliMockRecorder) InstallPlatform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallPlatform", reflect.TypeOf((*MockCli)(nil).InstallPlatform), arg0)
}

// SearchLibraries mocks base method
func (m *MockCli) SearchLibraries(arg0 string) ([]*commands.SearchedLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLibraries", arg0)
	ret0, _ := ret[0].([]*commands.SearchedLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLibraries indicates an expected call of SearchLibraries
func (mr *MockCliMockRecorder) SearchLibraries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLibraries", reflect.TypeOf((*MockCli)(nil).SearchLibraries), arg0)
}

// UninstallLibrary mocks base method
func (m *MockCli) UninstallLibrary(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallLibrary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallLibrary indicates an expected call of UninstallLibrary
func (mr *MockCliMockRecorder) UninstallLibrary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallLibrary", reflect.TypeOf((*MockCli)(nil).UninstallLibrary), arg0)
}

// UninstallPlatform mocks base method
func (m *MockCli) UninstallPlatform(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallPlatform", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallPlatform indicates an expected call of UninstallPlatform
func (mr *MockCliMockRecorder) UninstallPlatform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallPlatform", reflect.TypeOf((*MockCli)(nil).UninstallPlatform), arg0)
}

// UpdateIndexFiles mocks base method
func (m *MockCli) UpdateIndexFiles() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndexFiles")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIndexFiles indicates an expected call of UpdateIndexFiles
func (mr *MockCliMockRecorder) UpdateIndexFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexFiles", reflect.TypeOf((*MockCli)(nil).UpdateIndexFiles))
}

// UpdateLibraryIndex mocks base method
func (m *MockCli) UpdateLibraryIndex() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLibraryIndex")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLibraryIndex indicates an expected call of UpdateLibraryIndex
func (mr *MockCliMockRecorder) UpdateLibraryIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLibraryIndex", reflect.TypeOf((*MockCli)(nil).UpdateLibraryIndex))
}

// UpdatePlatformIndex mocks base method
func (m *MockCli) UpdatePlatformIndex() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatformIndex")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlatformIndex indicates an expected call of UpdatePlatformIndex
func (mr *MockCliMockRecorder) UpdatePlatformIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatformIndex", reflect.TypeOf((*MockCli)(nil).UpdatePlatformIndex))
}

// UpgradePlatform mocks base method
func (m *MockCli) UpgradePlatform(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradePlatform", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradePlatform indicates an expected call of UpgradePlatform
func (mr *MockCliMockRecorder) UpgradePlatform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradePlatform", reflect.TypeOf((*MockCli)(nil).UpgradePlatform), arg0)
}

// Upload mocks base method
func (m *MockCli) Upload(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (mr *MockCliMockRecorder) Upload(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockCli)(nil).Upload), arg0, arg1, arg2)
}
